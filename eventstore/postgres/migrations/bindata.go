// Code generated for package migrations by go-bindata DO NOT EDIT. (@generated)
// sources:
// 1_create_stream_tables.down.sql
// 1_create_stream_tables.up.sql
// 2_append_to_store.down.sql
// 2_append_to_store.up.sql
// 3_notification_triggers.down.sql
// 3_notification_triggers.up.sql
// 4_subscriptions_checkpoint.down.sql
// 4_subscriptions_checkpoint.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_create_stream_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\x2d\x4b\xcd\x2b\x29\xb6\xe6\x42\x12\x2a\x2e\x29\x4a\x4d\xcc\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\xc4\xa6\xb6\x55\x27\x00\x00\x00")

func _1_create_stream_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_stream_tablesDownSql,
		"1_create_stream_tables.down.sql",
	)
}

func _1_create_stream_tablesDownSql() (*asset, error) {
	bytes, err := _1_create_stream_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_stream_tables.down.sql", size: 39, mode: os.FileMode(420), modTime: time.Unix(1610579492, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_stream_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\x6f\xc2\x30\x14\x84\x77\xff\x8a\x13\x13\x91\x32\x74\xef\x64\xc2\x0b\x4a\xeb\x3a\x95\x63\xa4\x32\x45\xa6\x79\xaa\x22\x91\xd0\x26\x06\xa9\xff\xbe\x22\x94\x34\x25\xa5\xf0\x16\x2f\x9f\xcf\xf7\xee\x1c\x19\x92\x96\x60\xe5\x4c\x11\x5a\xdf\xb0\xab\x5a\x4c\x05\x00\x94\x05\xfa\xb1\xf4\x62\x0f\xa7\x4e\x2d\xf4\x52\xa9\xb0\x23\x8e\x7c\xee\x3f\xdf\xf9\x02\x31\xd9\x73\xd3\x96\xdb\x7a\x02\x20\xd1\x96\x16\x64\x7a\x02\x98\x53\x2c\x97\xca\xe2\x2e\x14\x1d\xfd\x6c\x92\x27\x69\x56\x78\xa4\x15\xa6\x03\xf1\x10\x65\x11\x88\xe0\x5e\x88\x5f\x76\x79\xcf\xb5\x3f\xb9\x7d\xdb\x6c\xd7\x6e\x93\xb7\xfc\xb1\xe3\xfa\x95\xf3\x7a\x57\xad\xb9\x41\x46\x26\x91\x7f\xd8\xc5\x8d\xbb\x0d\x43\xb8\x0c\x77\x4e\x46\xc2\x37\x64\x32\x98\xf3\x78\xbe\xe1\x4e\xfa\x0c\x05\x1e\xb2\x54\xcf\x46\xca\x15\x7b\x57\x38\xef\xae\xc2\x57\xd2\xee\x77\x0f\x7f\xcc\x06\xc7\x27\xe2\xd4\x50\xb2\xd0\xff\x5d\x0a\x60\x28\x26\x43\x3a\xa2\xec\xf4\xa5\x46\x6d\x22\xd5\x98\x93\x22\x4b\x88\x64\x16\xc9\x39\x1d\xfa\xfd\x0a\x00\x00\xff\xff\x44\xce\xe9\x01\x8e\x02\x00\x00")

func _1_create_stream_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_stream_tablesUpSql,
		"1_create_stream_tables.up.sql",
	)
}

func _1_create_stream_tablesUpSql() (*asset, error) {
	bytes, err := _1_create_stream_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_stream_tables.up.sql", size: 654, mode: os.FileMode(420), modTime: time.Unix(1610579507, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_append_to_storeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x70\x0b\xf5\x73\x0e\xf1\xf4\xf7\x53\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x2c\x28\x48\xcd\x4b\x89\x2f\xc9\x8f\x2f\x2e\xc9\x2f\x4a\xb5\xe6\x02\x04\x00\x00\xff\xff\x6d\xdf\x6a\xa8\x29\x00\x00\x00")

func _2_append_to_storeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_append_to_storeDownSql,
		"2_append_to_store.down.sql",
	)
}

func _2_append_to_storeDownSql() (*asset, error) {
	bytes, err := _2_append_to_storeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_append_to_store.down.sql", size: 41, mode: os.FileMode(420), modTime: time.Unix(1610579485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_append_to_storeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x5d\xaf\xda\x46\x10\x7d\xf7\xaf\x18\xa1\x5b\x01\x2a\xa0\xde\xd7\x4b\xa9\xe4\x0b\x0b\xa1\x22\x86\xd8\x26\x49\x9f\xac\x8d\x77\x6e\xd9\x06\xef\x5a\xbb\x03\xe9\x6d\xd3\xff\x5e\x79\xfd\x81\x4d\x1d\xa9\x52\x78\x62\xcf\xcc\xee\x9c\x33\x5f\x5e\x86\xcc\x8f\x19\xec\x43\x08\xd9\x61\xe7\x2f\x19\xac\x8f\xc1\x32\xde\xee\x03\xe0\x79\x8e\x4a\x24\xa4\x13\x4b\xda\xe0\xc8\x03\x00\x48\x2c\x19\xe4\x59\x42\xaf\x39\x02\xc4\xec\x63\x3c\x71\x78\x05\x4b\x51\x1c\x5a\xf8\x15\x8d\x95\x5a\x25\xe9\x09\xd3\xcf\xb0\x0d\x62\xb6\x61\x61\x69\xc2\x2b\x2a\x4a\x14\xcf\xb0\x7b\xa5\xc4\x73\xfe\x7a\xd6\x5c\xc0\xaf\xd1\x3e\x78\x2e\x0d\x19\x12\x17\x9c\xb8\x0b\x51\x1a\xbc\x31\x84\x2c\x3e\x86\x41\x04\xb1\xff\xbc\x63\x50\xb2\x1c\x54\x61\x07\x75\x44\x6f\x0c\x7e\x04\x0f\x0f\xde\x8a\x2d\x77\x7e\xc8\x9c\xd7\x99\x5b\xaa\xf5\x54\x17\x6a\xff\xb9\xf7\xcc\x36\xdb\xc0\x73\x7e\xd3\x29\x84\x48\x46\xe2\x15\x81\x4e\x08\x67\x4e\x68\xa9\x92\x5c\x2b\x84\x17\x6d\x9c\xd5\xe6\x98\xca\x17\x89\xa2\x72\x98\xb9\x37\x22\xb6\x63\xcb\x18\xec\xac\xa1\xe6\xe0\x6d\x10\xef\xfb\x78\x38\xe3\x3a\xdc\xbf\xad\x1e\xb1\x60\x1d\xf4\xe1\x0d\x0b\x19\x48\x01\x8b\x56\xc6\xfd\x60\x05\x76\xd6\x2e\xcc\xa2\x53\xa7\x79\x29\x63\xbb\x86\x60\x1f\xc3\x7a\x7f\x0c\x56\x10\xbf\x61\x81\x07\xd5\x6f\x3a\x85\xa5\x41\x4e\x08\x1c\x14\x7e\x01\x54\x64\x5e\x1b\x41\x02\xad\x34\x77\x72\x4a\xee\x11\x0b\xe3\x52\x42\xcd\x72\x24\xc5\x04\x5a\xa1\xc7\x8d\xf7\x7b\x7f\x77\x64\x11\x8c\x1a\xda\x93\x0e\xc7\x71\x45\xb2\xa2\xf3\x96\x7f\x46\xb0\x17\x83\x40\x1a\xa4\x92\x24\xf9\x59\xfe\x55\xa6\xff\x2e\xef\x52\x01\x9d\xa4\x85\x94\x5b\xbc\x91\xeb\xab\xed\x02\x7e\x9a\x3b\x07\x16\xac\x60\xbb\x9e\x37\xd5\x3d\xa0\x79\xd1\x26\x03\x9d\x93\xcc\xa4\x25\x99\x42\xaa\x55\x7a\x31\x06\x55\xfa\x0a\xae\x77\x67\x75\x0e\xbb\x1d\xfd\xf3\x2f\x30\x7d\x74\x15\xf8\x0f\xde\x47\xa1\x93\xf6\xd0\xdf\x46\x0c\xd8\xc7\x25\x3b\xb8\x81\x1b\x4a\x75\xe5\x67\x29\xee\x15\xe6\x46\x5f\xa5\x40\xf1\x04\x3f\x4c\x00\xff\xcc\x31\x25\x77\x18\x4e\xfa\x62\x4c\xba\x4c\xfa\x15\x6f\x55\x6a\x30\x43\x45\x7d\x19\xcd\x8d\x2c\x4a\x5f\x24\xde\xa2\x21\xa9\x7e\x77\x5e\xae\x33\x8a\xd9\x9c\x7d\x73\x7a\x16\xbd\xe8\x8f\xf0\x78\x8b\xec\x0b\x01\x1c\x0c\xa6\xda\x08\x14\x09\x27\x20\x99\xa1\x25\x9e\xe5\x65\x29\xb1\x99\xf3\x59\x77\xea\x17\xb7\xbf\x5f\xbf\xc2\x68\xf8\xf7\x20\xac\x5e\x99\xfa\x34\x78\x82\x61\x01\x93\x4e\xfe\xb0\x5a\x8d\x82\xfd\x87\xd1\x78\x5c\x20\xc3\x7f\x86\xe3\xa7\x27\xb7\x2d\xda\xfa\x0b\x65\x2e\x9a\x93\x04\x52\x91\xbe\x1d\x2d\x10\xff\x74\xae\xda\x69\x3a\x85\xf7\x95\x12\x75\xc9\x3e\xa1\xb1\x60\x4f\xfa\x72\x2e\xea\xc4\x0d\xc1\x8b\xd1\x19\x3c\x56\xfd\xd1\x9a\x89\xea\xa5\x51\x53\xef\x56\xbb\x4f\xee\x41\x29\x6e\x50\xb3\x22\x6e\x50\xb9\x13\xbb\x37\x07\x0e\x6c\x39\xd5\xe9\x71\xc0\xb8\x99\xb8\xc6\x9e\xfc\x5f\x02\x7d\x5d\x75\x47\xa5\x58\xdb\xf7\x58\xb5\xb2\xbf\x45\xe8\x96\xfd\x63\x2e\x8a\x65\xd3\x6a\xbd\x2f\x92\x4e\xed\xdd\x5a\xb7\x4e\xaa\xb3\xfc\x42\x28\xca\xec\x1e\x0f\xab\xe2\x63\xd5\x5d\x89\x11\x8b\x5b\xfb\xbe\xb7\x03\xbf\x7b\x75\x96\xdf\x18\x78\x77\x64\xe1\x6f\x8d\xba\x6a\xa5\xf7\xc4\x9b\x7b\x1e\x0b\x56\x73\xef\xe1\x01\x76\x7e\xb0\x39\xfa\x1b\x06\x87\xdd\x61\x13\xbd\xdb\xcd\xbd\x7f\x03\x00\x00\xff\xff\x80\xa7\x81\x26\x72\x07\x00\x00")

func _2_append_to_storeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_append_to_storeUpSql,
		"2_append_to_store.up.sql",
	)
}

func _2_append_to_storeUpSql() (*asset, error) {
	bytes, err := _2_append_to_storeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_append_to_store.up.sql", size: 1906, mode: os.FileMode(420), modTime: time.Unix(1610579012, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_notification_triggersDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x09\xf2\x74\x77\x77\x0d\x52\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\xcb\x2f\xc9\x4c\xab\x8c\x2f\x2e\x29\x4a\x4d\xcc\x8d\x2f\xa9\x2c\x48\x8d\xcf\xcf\x8b\x4f\x2c\x28\x48\xcd\x4b\x51\xf0\xf7\x53\x48\x2d\x4b\xcd\x2b\x29\xb6\xe6\xc2\xaf\x3d\x31\x27\x07\xbb\x36\x88\x3e\xb7\x50\x3f\xe7\x10\x4f\x7f\x3f\xbc\xf6\x5a\x13\x52\x9b\x98\x93\x63\xcd\x05\x08\x00\x00\xff\xff\xd0\xee\xfa\x52\xc7\x00\x00\x00")

func _3_notification_triggersDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_notification_triggersDownSql,
		"3_notification_triggers.down.sql",
	)
}

func _3_notification_triggersDownSql() (*asset, error) {
	bytes, err := _3_notification_triggersDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_notification_triggers.down.sql", size: 199, mode: os.FileMode(420), modTime: time.Unix(1610579019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_notification_triggersUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\x51\x6f\x9b\x30\x10\xc7\xdf\xfd\x29\x4e\x08\xc9\x89\x94\xee\x03\x80\xf6\x40\xc9\x85\x65\x62\x36\x3b\x8c\xda\x37\xe4\x2e\x5e\x15\x89\x90\x2c\xd0\x4a\x55\xe9\x77\x9f\x70\x29\xc1\x55\xb7\x3c\xed\x25\x9a\xdf\xec\xff\xf9\x77\x77\xdc\x1f\xc7\x84\x91\x42\x90\x04\x84\x59\x1a\xc5\x08\xab\x42\xc4\x6a\x2d\x05\xd4\xfb\x76\xfb\xf3\xa9\xd4\x55\x35\x9b\x33\x42\x55\x90\xc8\x41\xd1\x3a\x49\x90\x58\x94\x83\xef\xb3\x25\xc6\x69\x44\xc8\x00\x00\x76\xa6\xd5\x1b\xdd\x6a\xf8\x9a\x4b\x71\x1d\xb2\x6b\x4c\xd6\xc2\x55\x3e\x83\xc0\x9b\x4f\xe3\xb6\xeb\xac\xdc\xaf\x19\x7f\xf6\x92\x6a\x7f\xa7\xab\xab\xdc\xfc\x7a\x30\xf5\x0f\x73\x25\x1e\x76\x77\xe6\xe8\x05\x1c\xba\xce\x5e\xbc\xb7\x01\x65\x33\x04\x94\xb5\x0d\xe8\x55\x0e\x2f\x7c\x1e\x04\x43\x66\x4b\xcd\x90\x56\x92\xbe\xc1\xe1\xbe\x7c\x6d\x64\xc6\x7d\x5d\x55\x7c\x01\x9c\x8f\x69\xfb\xab\xcf\xee\xd6\x6b\xda\xa3\xd1\xbb\x72\xbb\xf1\x02\xf0\xf8\x28\xf4\x05\x8c\x12\x9c\x96\xbd\x03\x8b\x8f\x21\xed\xd3\xc1\x8c\x18\x17\xd2\x4b\x67\x20\xe6\xd1\xd4\xad\xcb\x78\x83\x9c\xa4\x73\x95\x3c\x9a\x63\xb3\xdd\xd7\x5e\x00\x7c\x1a\xd9\x43\x46\xed\x5d\x3b\x0b\xf8\xa8\x10\x87\x70\x62\x0c\x5a\xa0\xf0\x56\xfd\x8d\xf1\x36\xf5\x29\xa6\xeb\x46\x6f\x38\xc1\x2f\x7c\x3e\x4c\xf1\xd5\x76\x7d\xa6\x90\xa1\x58\x86\xcc\xf7\x21\x8d\x44\x52\x44\x09\x42\x96\x66\x49\xfe\x3d\x0d\x19\x3b\xef\xe2\xc9\x57\xbf\x0c\x37\xbf\xb3\xd2\x7f\x5b\x5f\xae\xad\x07\x97\x4e\x1e\xe4\x72\x5f\x97\xfa\x70\x30\xf5\xc6\xe2\xa2\x95\x42\x82\xb5\xc8\x91\x94\x3d\x90\x02\x6c\x03\x8d\xdd\xad\x24\x01\x46\xf1\x17\x20\x79\x63\x0f\xf0\x16\xe3\x42\x21\x64\x24\x63\x5c\x16\x84\xce\x5b\xff\xc7\xc4\x93\x11\xff\xab\x02\x9c\xdf\x34\x64\xbf\x03\x00\x00\xff\xff\x73\x42\x4e\x96\x9e\x06\x00\x00")

func _3_notification_triggersUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_notification_triggersUpSql,
		"3_notification_triggers.up.sql",
	)
}

func _3_notification_triggersUpSql() (*asset, error) {
	bytes, err := _3_notification_triggersUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_notification_triggers.up.sql", size: 1694, mode: os.FileMode(420), modTime: time.Unix(1610579026, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_subscriptions_checkpointDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x70\x0b\xf5\x73\x0e\xf1\xf4\xf7\x53\x48\x4f\x2d\x89\xcf\x2f\x8a\x4f\x2e\x4a\x4d\x2c\x49\x8d\x2f\x2e\x4d\x2a\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\x8b\x4f\xce\x48\x4d\xce\x2e\xc8\xcf\xcc\x2b\xb1\xe6\x02\x6b\x0a\x71\x74\xf2\x71\x55\x40\x56\x53\x8c\xa4\xa8\xd8\x9a\x0b\x10\x00\x00\xff\xff\xe0\x60\xe0\xac\x5b\x00\x00\x00")

func _4_subscriptions_checkpointDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_subscriptions_checkpointDownSql,
		"4_subscriptions_checkpoint.down.sql",
	)
}

func _4_subscriptions_checkpointDownSql() (*asset, error) {
	bytes, err := _4_subscriptions_checkpointDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_subscriptions_checkpoint.down.sql", size: 91, mode: os.FileMode(420), modTime: time.Unix(1610579032, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_subscriptions_checkpointUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcf\x6e\xe3\x20\x10\x87\xef\x3c\xc5\x1c\x7c\x88\xa5\x4d\xb4\xf7\x68\x0f\xac\x3d\xb1\xac\x65\xc1\xc5\x50\x25\x27\x94\x38\x24\xb5\xda\x98\x14\x63\xf5\xf5\x2b\x93\xa8\x55\xdc\x7f\x73\xe1\xf0\x9b\x61\x3e\x3e\x32\x89\x54\x21\x28\xfa\x97\x21\xf4\xc3\xae\x6f\x7c\x7b\x0e\xad\xeb\x7a\xd3\x3c\xd8\xe6\xf1\xec\xda\x2e\xf4\x30\x23\x00\x70\x93\x9b\x76\x0f\xb1\x14\xae\xd5\x78\x56\xb2\xfc\x4f\xe5\x06\xfe\xe1\xe6\x57\xec\x7e\xda\xf6\xc1\xf4\xf6\x79\xb0\x5d\x63\x4d\x37\x9c\x76\xd6\x43\xc9\x15\x16\x28\x81\x0b\x05\x5c\x33\x16\xaf\xc8\x71\x45\x35\x53\xf0\x9b\xa4\x4b\x42\xae\x48\x42\x82\xc4\x8a\xd1\x0c\x61\xa5\x79\xa6\x4a\xc1\xe1\x68\x83\x71\xde\x34\xde\x6e\x83\x35\x37\x38\xef\xb4\x17\x56\xf3\x01\x76\x04\x25\x29\x91\xa8\xb4\xe4\xf5\xf5\xc9\xb3\x1f\x51\x49\x0a\xb4\x86\x24\x21\xb1\xb3\xe4\x35\x4a\x35\x66\xe2\x3b\x5d\x93\xe5\x69\x9c\xbd\xa7\x4c\x63\x0d\xb3\x29\xda\x25\x1d\x6b\x3e\x87\xca\xfa\x83\xf3\x27\x18\xce\xfb\x6d\xb0\x10\x1c\x1c\x9c\x6f\x2c\x78\xf7\x02\xde\x86\xc1\x77\x6d\x77\x5c\xbc\x4d\x08\x0e\x99\xe0\x2b\x56\x66\xea\x8b\xad\x51\xb0\x00\x5d\xe5\xa3\xd5\x1a\xd5\xf4\x1b\xff\xe0\x3a\x63\x3a\xc7\x7c\x31\x09\xe2\xf8\x45\x57\xc9\x8b\x4f\x25\x2d\x09\x49\x12\x60\x94\x17\x9a\x16\x08\xf5\x1d\x5b\x92\xd7\x00\x00\x00\xff\xff\xd4\xd0\xd6\x3a\x53\x02\x00\x00")

func _4_subscriptions_checkpointUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_subscriptions_checkpointUpSql,
		"4_subscriptions_checkpoint.up.sql",
	)
}

func _4_subscriptions_checkpointUpSql() (*asset, error) {
	bytes, err := _4_subscriptions_checkpointUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_subscriptions_checkpoint.up.sql", size: 595, mode: os.FileMode(420), modTime: time.Unix(1610579039, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_create_stream_tables.down.sql":     _1_create_stream_tablesDownSql,
	"1_create_stream_tables.up.sql":       _1_create_stream_tablesUpSql,
	"2_append_to_store.down.sql":          _2_append_to_storeDownSql,
	"2_append_to_store.up.sql":            _2_append_to_storeUpSql,
	"3_notification_triggers.down.sql":    _3_notification_triggersDownSql,
	"3_notification_triggers.up.sql":      _3_notification_triggersUpSql,
	"4_subscriptions_checkpoint.down.sql": _4_subscriptions_checkpointDownSql,
	"4_subscriptions_checkpoint.up.sql":   _4_subscriptions_checkpointUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_create_stream_tables.down.sql":     &bintree{_1_create_stream_tablesDownSql, map[string]*bintree{}},
	"1_create_stream_tables.up.sql":       &bintree{_1_create_stream_tablesUpSql, map[string]*bintree{}},
	"2_append_to_store.down.sql":          &bintree{_2_append_to_storeDownSql, map[string]*bintree{}},
	"2_append_to_store.up.sql":            &bintree{_2_append_to_storeUpSql, map[string]*bintree{}},
	"3_notification_triggers.down.sql":    &bintree{_3_notification_triggersDownSql, map[string]*bintree{}},
	"3_notification_triggers.up.sql":      &bintree{_3_notification_triggersUpSql, map[string]*bintree{}},
	"4_subscriptions_checkpoint.down.sql": &bintree{_4_subscriptions_checkpointDownSql, map[string]*bintree{}},
	"4_subscriptions_checkpoint.up.sql":   &bintree{_4_subscriptions_checkpointUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
